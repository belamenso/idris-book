error, cannot fill the hole
    exactLength : (len : Nat) -> (input : Vect m a) -> Maybe (Vect len a)
    exactLength {m} len input = case m == len of
                                     True => Just ?cannotProceed
                                     False => Nothing
Idris doesn't trust ==, it's just a Bool, it doesn't guarantee that they
are really equal, maybe (==) x y = True

data EqNat : (n1 : Nat) -> (n2 : Nat) -> Type where
  Same : (num : Nat) -> EqNat num num

the (EqNat 3 3) (Same _)

You still can have *type* with unequal arguments (EqNat 2 4), just not
value (the (EqNat 3 4) (Same _) -- error)

Empty type: like EqNat 3 4, there are no values of that type

making implicit arguments explicit:
    sameS : (eq : EqNat k j) -> EqNat (S k) (S j)
    sameS : (k : Nat) -> (j : Nat) -> (eq : EqNat k j) -> EqNat (S k) (S j)

sameS : (k : Nat) -> (j : Nat) -> (eq : EqNat k j) -> EqNat (S k) (S j)
sameS k j eq = ?sameS_rhs
-- now case split on eq
sameS j j (Same j) = ?sameS_rhs_1 -- proof!

this is already implemented:
    = -- generalised equality
sth like (it's not in Prelude, but in the interpreter):
    data (=) : a -> b -> Type where -- like EqNat
        Refl : x = x -- like Same, but x is an implicit argument

the (1 = 2) Refl -- error
the (1 = 1) Refl -- ok
the (2 + 3 = 5) Refl

cong : {func : a -> b} -> x = y -> func x = func y

unification of (S k) and k + 1 will fail

typechecking:
    compute the expected type
    check if given type fits

Vect 4 Int and Vect (2 + 2) Int will unify
Vect (1 + k) Int -- Vect (S k) Int
Vect (k + 1) int -- Vect (plus k 1) Int

so you can see that k + 1 doesn't match the left side and for now
can't be evaluated further
    :printdef plus -- !!!!  
    plus : Nat -> Nat -> Nat
    plus 0 right = right
    plus (S left) right = S (plus left right)

so you sometimes need to explain to Idris that k + 1 is 1 + k
there's a library function for it
    plusCommutative : (left : Nat) -> (right : Nat) ->
                      left + right = right + left

    \k => plusCommutative 1 k
    -- (k : Nat) -> S k = plus k 1
think of it as a "reqrite rule" that lets you replace one expression
with another (??)

special syntax for rewrites:
rewrite _________ in ?____
        ^ of type _ = _

myReverse : Vect n a -> Vect n a
myReverse [] = []
myReverse {n = S k} (x :: xs) =
  rewrite plusCommutative 1 k in
          myReverse xs ++ [x]

instead of using a rewrite you can use a hole and
provide a separate proof
    reverseProof : (x : a) -> (xs : Vect k a) ->
                   Vect (k + 1) a -> Vect (S k) a
    reverseProof {k} x xs result = rewrite plusCommutative 1 k in result

    otherReverse : Vect n a -> Vect n a
    otherReverse [] = []
    otherReverse (x :: xs) = reverseProof x xs (otherReverse xs ++ [x])

Idris can deduce that 0 + m is m, but not that m + 0 is m

proofs:
plusZeroRightNeutral : (left : Nat) -> left + 0 = left
plusSuccRightSucc : (left : Nat) -> (right : Nat) ->
                    S (left + right) = left + S right
sym : left = right -> right = left

    append_nil : Vect m a -> Vect (plus m 0) a
    append_nil {m} xs = rewrite plusZeroRightNeutral m in xs
    -- append_nil {m} xs = rewrite plusCommutative m 0 in xs

    append_xs : Vect (S (m + k)) a -> Vect (plus m (S k)) a
    append_xs {m} {k} xs = rewrite sym (plusSuccRightSucc m k) in xs

    append : Vect n a -> Vect m a -> Vect (m + n) a
    append [] ys = append_nil ys
    append (x :: xs) ys = append_xs (x :: append xs ys)

Refl is how you express equality, but how to express something not being
equal? When you construct a value of type a = b you're giving evidence
that a and b are equal.

Void has no possible values:
    data Void : Type where
So if a function returns a value of type Void, one of the arguments to
that function must be impossible to construct

this is how you do it, impossible means that the pattern clause must
not type-check
    total proofIneq : 2 + 2 = 5 -> Void
    proofIneq Refl impossible

    total valueNotSuc : (x : Nat) -> x = S x -> Void
    valueNotSuc _ Refl impossible

(!) bottom can type check for any value, but is not total
    loop : Int
    loop = loop

if you have produced value of any type, then you can proove anything:
function in prelude:
    void : Void -> a

checkEqNat is not very useful now, typesystem needs more info
    checkEqNat : (num1 : Nat) -> (num2 : Nat) -> Maybe (num1 = num2)
    checkEqNat num1 num2 = Nothing


A property of some values is decidable if you can always say whether the property holds or not for specific values. For example, checking equality on Nat is decidable, because for any two natural numbers you can always decide whether they are equal or not.

type in prelude:
    data Dec : (prop : Type) -> Type where
         Yes : (prf : prop) -> Dec prop
         No  : (contra : prop -> Void) -> Dec prop
so prf is a proof that a property holds, if you have it, then you can
construct Yes of that property
You can construct No only if you have contra, but contra cannot ever be
evaluated, so type system must know that you cannot pass any argument to
contra, that is prop cannot exist

the (Dec (2 * 2 = 4)) (Yes Refl)

total proofIneq : 2 + 2 = 5 -> Void
proofIneq Refl impossible

t : Dec (4 = 5)
t = No proofIneq

"
When you run checkEqNat, you aren’t really going to produce a value of the empty type using zeroNotSuc, sucNotZero, or noRec. Essentially, a function that produces a value of type Void can be seen as a proof that its arguments can’t all be provided at the same time. In the case of noRec, the type of the functions says that if you can provide both a proof that k doesn’t equal j and a proof that S k = S j, then there’s a contradiction, and you can therefore have a value of type Void."

Prelude has DecEq and decEq for deciding equality
    interface DecEq a where
        decEq : (x : a) -> (y : a) -> Dec (x = y)

so proof that something is unequal is of a = b -> Void and
proof that something is equal is having a value of type a = b

The rewrite construct allows you to update a type using an equality proof.
Using holes and interactive editing, you can delegate the details of rewriting types to a separate function.
Void is a type with no values, used to show that inputs to a function can’t all occur at once.
A property is decidable if you can always say whether the property holds for some specific values.
Using Dec, you can compute at runtime whether a property is guaranteed to hold or guaranteed not to hold.

