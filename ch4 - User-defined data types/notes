the more precise your types will be the more you will get from
interactive editing in Idris

5 basic types of groups (all defined with the same syntax)
    enumerated
    union (enumerated + data)
    recursive (union + self-reference)
    generic
    dependent

convention:
initial capital letter for type and data constructors
(not technically required)

enumeration:
    data Bool = True | False -- <- data constructors
    --   ^ type constructor

union:
    data Shape = Triangle Double Double 
               | Circle Double

    ||| shape
    data Shape =
      ||| triangle
      Triangle Double Double
      | ||| rectangle
      Rectangle Double Double
      | ||| circle
      Circle Double
or (don't use unless you need additional flexibility)
    data Shape where
        Triangle : Double -> Double -> Shape
        Rectangle : Double -> Double -> Shape
        Circle : Double -> Shape

    data Nat = Z | S Nat

Nat
things like Nat are compiled down effectively :)
sort [1..200] is slow in terminal and fast after compilation
Nat is used mainly to describe structure so it's usually not too big
types are erased at compilation
internally compiler recognizes Nat and it's stored as an integer

    %name Picture pic, pic1, pic2 -- Idris will use these names when
                                     case-completing

recursive data structures must have at least one base case
    data Infinite = Forever Infinite

    data Maybe valtype = Nothing | Just valtype

    data List elem = Nil | (::) elem (List elem)

    data Either a b = Left a | Right b

    data Tree elem = Empty
                   | Node (Tree elem) elem (Tree elem)

List is a "generic type" (since it's : Type -> Type)
List Int is a type

    compare : Ord a => a -> a -> Ordering
    data Odering = LT | EQ | GT

@ patterns
when you pattern match something and want to return it unchanged
you can name your patterns
    @orig(Node left val right) => orig

This is why the functional notation is useful:
you can limit scope of accepted data types
    data BSTree : Type -> Type where
      Empty : Ord elem => BSTree elem
      Node : Ord elem => (left : BSTree elem) ->
                         (val : elem) -> 
                         (right : BSTree elem) ->
                         BSTree elem

dependent type is calculated from another value
Vect -> Nat -> Type -> Type
no syntactic distinction between types and expressions
they allow you to give more precise information about the 
    data constructors by adding more arguments to the type constructor

    data PowerSource = Petrol | Pedal

    -- dependent data type
    data Vehicle : PowerSource -> Type where
         Bicycle : Vehicle Pedal
         Car : (fuel : Nat) -> Vehicle Petrol
         Bus : (fuel : Nat) -> Vehicle Petrol

    -- valid for all, type var
    wheels : Vehicle power -> Nat
    wheels Bicycle = 2
    wheels (Car fuel) = 4
    wheels (Bus fuel) = 4

    -- valid for some, specify
    refuel : Vehicle Petrol -> Vehicle Petrol
    refuel (Car fuel) = Car 100
    refuel (Bus fuel) = Bus 200
    refuel Bicycle impossible -- this clause by default doesn't appear
                                 after case expanding, but you can
                                 add impossible keyword if you want

here you defined two data types: Vehicle Petrol and Vehicle Pedal
so they're sometimes called "families of types"
because we define multiple of them at the same time
the PowerSource is an index of the Vehicle family
it tells you exactly which Vehicle type you mean

Vect is a family of types, indexed by its length and parametrized
by an element type
parameter - unchanged across the entire structure, here every element
of the vector has the same type
index - may change across a structure, here, every subvector has
a different length
you can be sure that the specific value of a parameter plays no
    part in function's definition. The index, however, might.
    (like with CreateEmpties)

Fin is in Data.Fin, it's a bounded Nat, 0 <= x < n
type-safe element lookup
    Vect.index : Fin n -> Vect n a -> a

imort module in repl by :module
it there are many functions with the same names, quality them:
    Vect.index

you can use [] for Nil, Fin
            0, 1, ... for Z, S(Z), ...
            [,] for ::

Data.Vect: (check out how cool this is :)
    integerToFin : Integer -> (n : Nat) -> Maybe (Fin n)

common pattern:
    a type tells you when it's safe to call and you have to check it before
    calling

    vectTake : (n : Nat) -> Vect (n + m) a -> Vect n a
    vectTake Z xs = []
    vectTake (S k) (x :: xs) = x :: vectTake k xs

"Design a new data type for the representation of the data store. In type-driven development, even at the highest level, types come first. Before we can implement any part of a data store program, we need to know how we’re representing and working with the data." 

names can be with ':
    x'

    items : (store : DataStore) -> Vect (size store) String
    items (MkData size items) = items

replWith:
    : (state : a) -> (prompt : String) -> (a -> String -> Maybe (String, a))
    -- exists if you return Nothing

    the Integer (cast "sdafsd") -- 0

"To process the String input, you somehow have to work out which one of the commands add, get, or quit has been entered. Rather than processing the input string directly, it’s usually much cleaner to define a new data type that represents the possible commands. This way, you can cleanly separate the parsing of commands from the processing."
Don't represent data with strings, make a new data type for it,
    if you want you can leave out the error handling (hole), but
    it will make it more roboust and extensible

    span : (Char -> Bool) -> String -> (String, String)
    span (/= ' ') "hello there" --  ("hello", " there")

    ltrim : String -> String
    unpack : String -> List Char
    isDigit : Char -> Bool
    all : (a -> Bool) -> List a -> Bool

    all isDigit $ unpack val

